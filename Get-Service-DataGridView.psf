<File version="2">
  <FileID>9b26d912-2d9b-4ff7-b35e-78f86a6297e2</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADDXSURBVHhe7d13cNXnne/x3dkymVt2/9i5szN7
7+7s3dnN7t3ZFKc5sU1cYzuOY8cNJzYYCAYXcAHbVNO7Mb3bYEwz3WC6hEC9V1BvSEK96+ioIAn4
3Of5SbJBnCSmJYjn/fa8Bks653fO7wjO8/2dIv0ZERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERkaNFGcV/9Vd/Vfztb3+rePiwYcUv
vzwCAAD0A6+MHFl83733Fv/lX/5l8Z//+Z8XmzU931vd/1B/8Rd/UfVP//RPGvjcc1qwcLHCY1OV
V1zjyS2qBgAAt6i8klpl5JXos517NGTIEH3z3/5N5oBePUv8H6z4ObP47953SEm5lQpLK1JYaiEA
AOgHQlMKlZRXpbCoRI0cMULf+MY3OnvW99/ft/7rv4rnzFuoZLP4h6YUKMywfwIAgFufXbdPJOcr
paBG23fv010/+cnXGwCGDRtWHBqdoshTxQo3kwQAAOh/TiYXKLekRpMmTv56A8CIESOKz5Q3KMIO
AGlnAABAP2SfCiirazcDwPtffwAoNgOAfQQgwmwAAAD0P/b1AGerWzRhwqSvPwAUldcr6nSJGQKK
AAC44aLTSxSXVab47JsnNrPUrGXF3uXZP2MzzwY83Y1i9yc646u184+9j33ZRwHO1tgBYOLVDAAN
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
74sAGQAA4Oa59EWAdk0IdH98o9mH4S9dd+x1sPf5gU57o9n1pN++C6D39xj3TjC3K/scjf2ph4cO
HfIGHgYAALjx7AJsX2tlf09+73PjtzO7fh47dqx//S4Ae2RuH76wO2CveN+duh3Z39dsf29zoNsD
AHD97NqSk5Pj3d8Guh++3dj10+6r/eVH9pGHQLfJpW6JAcCy3yg7sbjEPvIR6LYAANwY9lGAQPe/
t7Ovs/hbt8wAAAAA/ngYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABx00wcA
v7kAeyEAAODW0dLcpLM3YwCwcsubvekCAADcevIr7KJ/EwYAy04WAADg1nPp4m/d0AEAAAD0DwwA
AAA46NoGgBq/ciravDMDAID+J7OsRTX+C19/APjtb4eXNfq7VN8ib3IAAAD9T23zBZ27II0fP+Fi
zxL/+3vqqafzx4+f2GnO0GmnBgAA0B9N6JwwcVLnwIEDW3uWeCIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiLH+rM/+/+guUdQQ+cO
WAAAAABJRU5ErkJggg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formMain" children="Controls">
    <Property name="ClientSize">584, 362</Property>
    <Property name="Name">formMain</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">Grid</Property>
    <Event name="Load">formMain_Load</Event>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelComputerName" children="Controls">
      <Property name="Location">12, 27</Property>
      <Property name="Name">labelComputerName</Property>
      <Property name="Size">100, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">Computer Name</Property>
      <Event name="Click">labelComputerName_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxComputerName" children="Controls">
      <Property name="Location">118, 24</Property>
      <Property name="Name">textboxComputerName</Property>
      <Property name="Size">454, 20</Property>
      <Property name="TabIndex">3</Property>
      <Event name="TextChanged">textboxComputerName_TextChanged</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridviewResults" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 69</Property>
      <Property name="Name">datagridviewResults</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">560, 252</Property>
      <Property name="TabIndex">2</Property>
      <Event name="ColumnHeaderMouseClick">datagridviewResults_ColumnHeaderMouseClick</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonExit" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="Location">497, 327</Property>
      <Property name="Name">buttonExit</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">E&amp;xit</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonExit_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonLoad" children="Controls">
      <Property name="Anchor">Bottom, Left</Property>
      <Property name="Location">12, 327</Property>
      <Property name="Name">buttonLoad</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">&amp;Load</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonLoad_Click</Event>
    </Object>
  </Object>
  <Code><![CDATA[
#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]
		$DataGridView,
		
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		
		[Parameter(Mandatory = $false)]
		[string]
		$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		[ValidateNotNull()]
		$InputObject,
		
		[ValidateNotNull()]
		[System.Data.DataTable]
		$Table,
		
		[switch]
		$RetainColumns,
		
		[switch]
		$FilterWMIProperties)
	
	if ($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($InputObject -eq $null) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($item -ne $null)
				{
					$object = $item
					break
				}
			}
			
			if ($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($prop.Value -ne $null)
					{
						try { $type = $prop.Value.GetType() }
						catch { }
					}
					
					if ($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @(, $Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(, $Table)
}
#endregion

$formMain_Load = {
	#TODO: Initialize Form Controls here
	$textboxComputerName.Text = $env:COMPUTERNAME
	$buttonLoad_Click.Invoke()
}

$buttonExit_Click = {
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonLoad_Click = {
	#TODO: Place custom script here
	#	---------------------------------
	#	Sample Code to Load Grid
	#	---------------------------------
	#	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
	#	Load-DataGridView -DataGridView $datagridviewResults -Item $processes
	#	---------------------------------
	#	Sample Code to Load Sortable Data
	#	---------------------------------
	# 	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
	#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
	#	Load-DataGridView -DataGridView $datagridviewResults -Item $table
	
	try
	{		
		$services = Get-Service -ComputerName $textboxComputerName.Text -ErrorAction 'Stop' |
		Select-Object -Property Name, DisplayName, Status, ServiceType, CanStop, CanShutDown, CanPauseAndContinue
	}
	catch [InvalidOperationException]
	{
		[void][System.Windows.Forms.MessageBox]::Show("Cannot get services on computer: $($textboxComputerName.Text). `n`nCheck the spelling and credentials and try again.", "Service error")
	}
	catch
	{
		[void][System.Windows.Forms.MessageBox]::Show("$($Error[0].Exception.Message)", "Unexpected error")
	}
	
	if ($services)
	{
		$table = ConvertTo-DataTable -InputObject $services
		Load-DataGridView -DataGridView $datagridviewResults -Item $table
	}
	
	
}

$datagridviewResults_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if ($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}
		
		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}

$labelComputerName_Click = {
	#TODO: Place custom script here
	
}

$textboxComputerName_TextChanged = {
	#TODO: Place custom script here
	if ($textboxComputerName.Text -eq "")
	{
		$buttonLoad.Enabled = $false
		#$datagridviewResults.Rows.Clear()
		$datagridviewResults.DataSource = $null
	}
	else
	{
		$buttonLoad.Enabled = $true
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>