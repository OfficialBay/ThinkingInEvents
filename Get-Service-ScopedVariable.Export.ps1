#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 7d56c074-87d4-4aaf-95c5-53d32dc65d45
# Source File: Get-Service-ScopedVariable.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
JxMAAB+LCAAAAAAABADVmNFu2jAUhu8n7R2sXKdAgCztBJFKWqaJdlSFdburnOSEejUxchxK9vRz
SEBAoDEIUCckRML5/Z9z/NnEtB7BY1PgyQ0WGMkPEWFhW6tr9udPCLX6nIxIiGmXUPiBx2B/A3Ex
AD4lHlwMPDYB/wlzgl0KlUkUtKoFQTaM+wc8gUQygbY2SCIB48ovEvrsLap0GR9n7zra9pWOnvKs
mpVa+tKRE1MRc2iHEAuOqY4eYpcSrwfJkL1C2HYtC5ue+cW4ajShdnmloVCm0tYCOZ4sIM9fQ94L
oT6XAs1hoeCMRlnZMuMHLmvjIsmV154HE9GJhWDhIkZGPUIAUu9BHubOA1YtqosBq4sRdzg4lEAo
BuQvaLZpWjoy6rVSUdqgDuM+8IFIqFR2yQz8G4IpG5WK7/GMjKVfh82kENMIyiUk3FeSQqDZ650v
FQ1hJrRV1oqK26lsVx5+x7C/6fGc3mxV52ELTTmG2QyfHMQiJ7tRLHbnjnlYkBREo9nUkWUVurNr
GjZ9FYQZkXXL0FHDUIgfYvd76IPkQym6dKKLmp8RPJEoxnTOfAd7rw6jjGv2kMdb9auoyGXmvRYb
8Ty/v4FLNePlg9LjUBYdDk79AG7mjsrIGMb+yDSUkVHN5XiwzB2Pw8kddoGeHBOaujhsPIkF8Pk8
7gVLV0Zo9j3xOItYINAAhxGSy4UEOrqqWOZEKLR/nTjDVCaukLw6d+aljupKJC25a6pzt5LSV0V+
CrX8h7tNv7cfPdkzyCNE0lWz+729WGk2DvlZUzI5fG+qKzOilMjxNqZ+7zg8pcnLB7uTAyWkj8tm
H2dnsr6kT9vKtG3JXxm8hmnKzUkJpSV4xWPABg3pxDkvOByBvzW755WAdyBZvyjn5ZZzxmVmUyLP
HyenBlK3Se5m7DqnpfBgEgLPKXrnrLZ5GNxxUlvvynUUwVjmC9EiOr+T2OPIY5wS9wg1t6rLUTdd
si6fw+PoM1numP4HcR4jjt9IODrEq9YIzMAKDMM3a7iBy71+j+l5aiJcYsp4khN90JTtXZ3DOJyl
vLwquTZlaSeobXmZre1WdfWPMfsfr3/6WicTAAA=#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.93
     Generated on:       9/3/2015 4:29 PM
     Generated by:        June Blender
     Organization:       SAPIEN Technologies, Inc
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2015
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-Get-Service-ScopedVariable_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formGetService = New-Object 'System.Windows.Forms.Form'
	$buttonGetService = New-Object 'System.Windows.Forms.Button'
	$buttonClose = New-Object 'System.Windows.Forms.Button'
	$labelComputerName = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$textboxComputerName = New-Object 'System.Windows.Forms.TextBox'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	<#	
	.NOTES
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.93
	 Created on:   	8/31/2015 5:34 PM
	 Created by:   	June Blender (@juneb_get_help)
	 Organization: 	SAPIEN Technologies, Inc. 
	 Filename:     	Get-Service.psf
	===========================================================================
	.DESCRIPTION
	Creates a PowerShell GUI that runs Get-Service on the specified computer. 
	
	The user enters the computer name in the text box and clicks the Get Service
	button or presses <Enter>.
	
	-- The default value in the textbox is the local computer name.
	-- If the text box is empty (no chars or only spaces), the Get-Service button is disabled.
	-- If the computer name is not valid, a message box displays the error.
	-- The user can also press Enter in the text box, because Get-Service is the AcceptButton for the form.
	
	This version of the script uses a script-scoped variable, $cn, for the value in $TextboxComputerName.
	Because the script block in each event handler has its own scope, variables that are shared among the
	event handlers must be kept in a parent scope. 
	
	Event handlers (any child scope) can read the script-scoped $cn variable, but they can't 
	change it unless they refer to it explicitly as $script:cn. If a statement refers to a variable 
	that doesn't exist in local scope, PowerShell looks for the variable in each parent scope.
	
	In this code, I write the variables as required, but put the code with the intended scope in a comment.
	
	#>
	
	# *******************************************************
	# Script-level (not global) variables
	# *******************************************************
	# It's not necssary to define the script-scoped $cn variable here. 
	# PowerShell creates it when it's referenced in $textboxComputerName_TextChanged.
	# This script is designed to teach scoping. In any other script, I would 
	# define it here clarify intent, even if it's not necessary.
	
	# $script:cn = ''
	
	$formGetService_Load = {
		
		# This statement sets a default value for the textbox.
		# Assigning a value to the Text property of the textbox
		# triggers the Textbox_TextChanged event, which assigns 
		# a new value to $script:cn. No need to do it explicitly.
		$textboxComputerName.Text = $env:COMPUTERNAME
			
		#I typically set these properties in the PowerShell Studio
		# Properties dialog, but I'm setting them here explicitly
		# to make it easier to debug my .psf file.
		$formGetService.AcceptButton = $buttonGetService
		
		$buttonOK.DialogResult = 'OK'
		$buttonClose.DialogResult = 'None'	
	}
	
	
	$buttonOK_Click={
		#DialogResult = 'OK'
	}
	
	$buttonClose_Click = {
		#DialogResult = 'None'
		$formGetService.Close()
	}
	
	$textboxComputerName_TextChanged={
		# This statement creates a script-level variable and assigns
		# to it the value in the textbox.
		# To change a script-level variable, you must use a scope modifier.
		# Else, it creates a new variable in local scope.
		$script:cn = $textboxComputerName.Text.Trim()
		
		$buttonGetService.Enabled = $false
		# if ($script.cn -ne '')
		if ($cn -ne '')
		{
			$buttonGetService.Enabled = $true
		}
		
		# Clever alternatives to the nice, clear code above.
		#$buttonGetService.Enabled = $script:cn
		#$buttonGetService.Enabled = $cn
		#$buttonOK.Enabled = $textboxComputerName.Text.Trim() -ne ""
		
	}
	
	$buttonGetService_Click={
		try
		{
			# Explicit scoping is not necessary here, because the event handler is reading a
			# value, not changing it.
			#Get-Service -ComputerName $script:cn | Out-GridView -Title "Services on $script:cn"
			Get-Service -ComputerName $cn | Out-GridView -Title "Services on $cn"
		}
		catch
		{
			[void][System.Windows.Forms.MessageBox]::Show("$($Error[0].Exception.Message)", "ComputerName Error")
			#$errorprovider1.SetError($textboxComputerName, "Cannot get services on computer: $script:cn. `nCheck the spelling and try again.")		
		}
	}
	
	$labelComputerName_Click = {	
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formGetService.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonGetService.remove_Click($buttonGetService_Click)
			$buttonClose.remove_Click($buttonClose_Click)
			$labelComputerName.remove_Click($labelComputerName_Click)
			$buttonOK.remove_Click($buttonOK_Click)
			$textboxComputerName.remove_TextChanged($textboxComputerName_TextChanged)
			$formGetService.remove_Load($formGetService_Load)
			$formGetService.remove_Load($Form_StateCorrection_Load)
			$formGetService.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formGetService.SuspendLayout()
	#
	# formGetService
	#
	$formGetService.Controls.Add($buttonGetService)
	$formGetService.Controls.Add($buttonClose)
	$formGetService.Controls.Add($labelComputerName)
	$formGetService.Controls.Add($buttonOK)
	$formGetService.Controls.Add($textboxComputerName)
	$formGetService.AcceptButton = $buttonGetService
	$formGetService.ClientSize = '557, 120'
	$formGetService.FormBorderStyle = 'FixedDialog'
	$formGetService.MaximizeBox = $False
	$formGetService.MinimizeBox = $False
	$formGetService.Name = 'formGetService'
	$formGetService.Text = 'Get-Service'
	$formGetService.add_Load($formGetService_Load)
	#
	# buttonGetService
	#
	$buttonGetService.Location = '144, 77'
	$buttonGetService.Name = 'buttonGetService'
	$buttonGetService.Size = '271, 31'
	$buttonGetService.TabIndex = 1
	$buttonGetService.Text = 'Get-Service'
	$buttonGetService.UseVisualStyleBackColor = $True
	$buttonGetService.add_Click($buttonGetService_Click)
	#
	# buttonClose
	#
	$buttonClose.Location = '12, 77'
	$buttonClose.Name = 'buttonClose'
	$buttonClose.Size = '111, 31'
	$buttonClose.TabIndex = 3
	$buttonClose.Text = 'Close'
	$buttonClose.UseVisualStyleBackColor = $True
	$buttonClose.add_Click($buttonClose_Click)
	#
	# labelComputerName
	#
	$labelComputerName.Font = 'Microsoft Sans Serif, 9.75pt'
	$labelComputerName.Location = '12, 15'
	$labelComputerName.Name = 'labelComputerName'
	$labelComputerName.Size = '158, 23'
	$labelComputerName.TabIndex = 4
	$labelComputerName.Text = 'ComputerName:'
	$labelComputerName.add_Click($labelComputerName_Click)
	#
	# buttonOK
	#
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '434, 77'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '111, 31'
	$buttonOK.TabIndex = 2
	$buttonOK.Text = 'OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# textboxComputerName
	#
	$textboxComputerName.Font = 'Microsoft Sans Serif, 9.75pt'
	$textboxComputerName.Location = '176, 12'
	$textboxComputerName.Name = 'textboxComputerName'
	$textboxComputerName.Size = '355, 22'
	$textboxComputerName.TabIndex = 0
	$textboxComputerName.add_TextChanged($textboxComputerName_TextChanged)
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formGetService
	$formGetService.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formGetService.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formGetService.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formGetService.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formGetService.ShowDialog()

} #End Function

#Call the form
Call-Get-Service-ScopedVariable_psf | Out-Null
